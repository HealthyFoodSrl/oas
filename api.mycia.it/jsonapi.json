{
    "openapi": "3.0.3",
    "info": {
        "title": "api.mycia.it",
        "description": "This page contains the documentation on how to use MyCia through shared API calls.\n\n > Note: this spec is based on [jsonapi format v1.1](https://jsonapi.org/format/1.1/) and each request, response and structure SHALL conform to the standard.\n\n## Request Content-Type\n\nThe Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded` or `multipart/form-data`;\n\nAdd an `Accept: application/json` header to the request to get the JSON response.\nSending requests with the `Accept` header is necessary if you want to use URLs\nfor related endpoints returned by the API, such as pagination URLs.\n\n## Authentication\n\nSome endpoints do not require any authentication, pretty much anything else will require you to be authenticated.\n\nTo become authenticated you will need to ask for your API Account.\n\nOnce you have your client API account you can pass it in along with your API id as an HTTP header like this:\n\n```\ncurl -X GET \"http://127.0.0.1:3000/v1/module/action\" \\\n-H \"Accept: application/json;\" \\\n-H \"client_id: your_client_id\" \\\n-H \"client_secret: your_client_secret\"\n```\n\nand this is how POST requests will look:\n\n```\ncurl -X POST \"http://127.0.0.1:3000/v1/module/action\" \\\n-H \"Content-Type: application/x-www-form-urlencoded;\" \\\n-H \"Accept: application/json;\" \\\n-H \"client_id: your_client_id\" \\\n-H \"client_secret: your_client_secret\" \\\n-F \"field1=data\" \\\n-F \"field2=data\" \\\n-F \"field3=data\"\n```",
        "version": "v1"
    },
    "servers": [
        {
            "url": "https://api-staging.mycia.it",
            "description": "Staging url"
        },
        {
            "url": "https://api.mycia.it",
            "description": "Base url"
        }
    ],
    "paths": {},
    "components": {
        "schemas": {
            "EntityError": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "The given data was invalid."
                    },
                    "errors": {
                        "type": "object",
                        "properties": {
                            "data.attributes.fieldname": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "The fieldname must be a valid JSON string."
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
